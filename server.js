require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const { twiml } = require('twilio');
const twilio = require('twilio');
const AccessToken = twilio.jwt.AccessToken;
const VoiceGrant = AccessToken.VoiceGrant;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Twilio (–¥–ª—è REST API)
const client = twilio(process.env.TWILIO_SID, process.env.TWILIO_TOKEN);

// Supabase
const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

const activeIntervals = new Map();

// === 1. –í—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Voice SDK v2 ===
app.get('/token-c', async (req, res) => {
  res.header('Access-Control-Allow-Origin', '*');
  const { creator_id } = req.query;
  if (!creator_id) return res.status(400).json({ error: 'creator_id is required' });

  try {
    const token = new AccessToken(
      process.env.TWILIO_SID,
      process.env.TWILIO_API_KEY,
      process.env.TWILIO_API_SECRET,
      { identity: 'C' }
    );
    token.addGrant(new VoiceGrant({ incomingAllow: true }));
    return res.json({ token: token.toJwt() });
  } catch (err) {
    console.error('Token generation error:', err);
    return res.status(500).json({ error: 'Failed to generate token' });
  }
});

// === 2. –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è A –Ω–∞ –Ω–æ–º–µ—Ä B ===
app.post('/incoming-call', async (req, res) => {
  const from = req.body.From;
  const calledNumber = req.body.To;
  const DOMAIN_NAME = process.env.DOMAIN_NAME;

  const twimlResponse = new twiml.VoiceResponse();

  try {
    // 1. –ù–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –Ω–æ–º–µ—Ä
    const { data: serviceNumber, error: snErr } = await supabase
      .from('service_numbers')
      .select('id, number, creator_id, price_per_minute')
      .eq('number', calledNumber)
      .single();
    if (snErr || !serviceNumber) {
      twimlResponse.say('Service unavailable.');
      twimlResponse.hangup();
      return res.type('text/xml').send(twimlResponse.toString());
    }

    // 2. –ù–∞–π—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    const { data: creator, error: crErr } = await supabase
      .from('creators')
      .select('phone')
      .eq('id', serviceNumber.creator_id)
      .single();
    if (crErr || !creator) {
      twimlResponse.say('System error.');
      twimlResponse.hangup();
      return res.type('text/xml').send(twimlResponse.toString());
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–æ–Ω—è—â–µ–≥–æ
    const { data: user, error: userErr } = await supabase
      .from('customer_balances')
      .select('id, balance')
      .eq('phone_number', from)
      .single();
    if (userErr || !user) {
      twimlResponse.say('Account not found.');
      twimlResponse.hangup();
      return res.type('text/xml').send(twimlResponse.toString());
    }

    const balance = Number(user.balance);
    const pricePerMinute = serviceNumber.price_per_minute || 3;
    if (balance < pricePerMinute) {
      twimlResponse.say('No more credits.');
      twimlResponse.hangup();
      return res.type('text/xml').send(twimlResponse.toString());
    }

    // ‚úÖ –°–æ–µ–¥–∏–Ω—è–µ–º A —Å –∫–ª–∏–µ–Ω—Ç–æ–º C –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ <Dial>
    console.log(`[ProxyCall] A=${from} ‚Üí client:C`);

    const twimlResponse = new twiml.VoiceResponse();
twimlResponse.say('Connecting you to the creator...');
const dial = twimlResponse.dial({ callerId: process.env.TWILIO_NUMBER, action: '/post-call', method: 'POST', timeout: 0 });
dial.client('C'); // Identity –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ C


    return res.type('text/xml').send(twimlResponse.toString());

  } catch (err) {
    console.error('Error in /incoming-call:', err);
    twimlResponse.say('System error.');
    twimlResponse.hangup();
    return res.type('text/xml').send(twimlResponse.toString());
  }
});
app.post('/post-call', (req, res) => {
  console.log('Call ended', req.body);
  res.sendStatus(200);
});
// === 3. –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è ===
app.post('/call-status', async (req, res) => {
  const callSid = req.body.CallSid;
  const callStatus = req.body.CallStatus;
  const caller = req.body.From; // –Ω–æ–º–µ—Ä –∑–≤–æ–Ω—è—â–µ–≥–æ
  const pricePerInterval = 3; // 3 –∫—Ä–µ–¥–∏—Ç–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
  const intervalMs = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥

  console.log(`[CALL-STATUS] CallSid=${callSid}, Status=${callStatus}, Caller=${caller}`);

  if (callStatus === 'answered' || callStatus === 'in-progress') {
    // –°–Ω–∏–º–∞–µ–º —Å—Ä–∞–∑—É –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç—ë–∂
    const initialCharge = await chargeUser(caller, pricePerInterval);
    if (!initialCharge) {
      console.log(`[CALL] –£ ${caller} –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ ${callSid}`);
      try { await client.calls(callSid).update({ status: 'completed' }); } catch(e){ console.warn(e.message); }
      return res.sendStatus(200);
    }

    // –¢–∞–π–º–µ—Ä —Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const intervalId = setInterval(async () => {
      const credits = await getUserCredits(caller);
      if (credits >= pricePerInterval) {
        await chargeUser(caller, pricePerInterval);
      } else {
        console.log(`[CALL] –£ ${caller} –∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ ${callSid}`);
        try { await client.calls(callSid).update({ status: 'completed' }); } catch(e){ console.warn(e.message); }
        clearInterval(intervalId);
        activeIntervals.delete(callSid);
      }
    }, intervalMs);

    activeIntervals.set(callSid, intervalId);
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  if (['completed', 'busy', 'no-answer', 'failed'].includes(callStatus)) {
    if (activeIntervals.has(callSid)) {
      clearInterval(activeIntervals.get(callSid));
      activeIntervals.delete(callSid);
      console.log(`[CALL] CallSid=${callSid} –∑–∞–≤–µ—Ä—à—ë–Ω. –¢–∞–π–º–µ—Ä —É–¥–∞–ª—ë–Ω.`);
    }
  }

  res.sendStatus(200);
});

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async function getUserCredits(phone) {
  const { data, error } = await supabase
    .from('customer_balances')
    .select('balance')
    .eq('phone_number', phone)
    .single();
  return error || !data ? 0 : Number(data.balance);
}

async function chargeUser(phone, price = 3) {
  const { data: user, error: userErr } = await supabase
    .from('customer_balances')
    .select('id, balance')
    .eq('phone_number', phone)
    .single();

  if (userErr || !user) {
    console.error('[SUPABASE] User not found for charging', userErr);
    return false;
  }
  if (Number(user.balance) < price) return false;
  const newBalance = Number(user.balance) - price;

  // const newBalance = Math.max(0, Number(user.balance) - price);

  const { error } = await supabase
    .from('customer_balances')
    .update({ balance: newBalance })
    .eq('id', user.id);

  if (error) {
    console.error('[SUPABASE] Failed to update balance', error);
    return false;
  }

  console.log(`[CREDITS] –°–ø–∏—Å–∞–Ω–æ ${price} —É ${phone}, –æ—Å—Ç–∞—Ç–æ–∫ ${newBalance}`);
  return true;
}

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
